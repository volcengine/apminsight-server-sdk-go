// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings.proto

package settings_models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SampleStrategy int32

const (
	SampleStrategy_ALL          SampleStrategy = 0
	SampleStrategy_SAMPLE_RATIO SampleStrategy = 1
	SampleStrategy_RATE_LIMIT   SampleStrategy = 2
)

var SampleStrategy_name = map[int32]string{
	0: "ALL",
	1: "SAMPLE_RATIO",
	2: "RATE_LIMIT",
}
var SampleStrategy_value = map[string]int32{
	"ALL":          0,
	"SAMPLE_RATIO": 1,
	"RATE_LIMIT":   2,
}

func (x SampleStrategy) Enum() *SampleStrategy {
	p := new(SampleStrategy)
	*p = x
	return p
}
func (x SampleStrategy) String() string {
	return proto.EnumName(SampleStrategy_name, int32(x))
}
func (x *SampleStrategy) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SampleStrategy_value, data, "SampleStrategy")
	if err != nil {
		return err
	}
	*x = SampleStrategy(value)
	return nil
}
func (SampleStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{0}
}

type ServiceSettings struct {
	ServiceName string    `protobuf:"bytes,1,req,name=service_name,json=serviceName" json:"service_name"`
	Settings    *Settings `protobuf:"bytes,2,req,name=settings" json:"settings,omitempty"`
}

func (m *ServiceSettings) Reset()         { *m = ServiceSettings{} }
func (m *ServiceSettings) String() string { return proto.CompactTextString(m) }
func (*ServiceSettings) ProtoMessage()    {}
func (*ServiceSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{0}
}
func (m *ServiceSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSettings.Merge(dst, src)
}
func (m *ServiceSettings) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSettings proto.InternalMessageInfo

func (m *ServiceSettings) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceSettings) GetSettings() *Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type Settings struct {
	Db              *Db                `protobuf:"bytes,1,req,name=db" json:"db,omitempty"`
	Trace           *Trace             `protobuf:"bytes,2,req,name=trace" json:"trace,omitempty"`
	BusinessError   *BusinessError     `protobuf:"bytes,3,opt,name=business_error,json=businessError" json:"business_error,omitempty"`
	ProfileSettings *ProfileSettings   `protobuf:"bytes,4,opt,name=profile_settings,json=profileSettings" json:"profile_settings,omitempty"`
	ServiceSettings []*ServiceSettings `protobuf:"bytes,100,rep,name=service_settings,json=serviceSettings" json:"service_settings,omitempty"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{1}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(dst, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetDb() *Db {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *Settings) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func (m *Settings) GetBusinessError() *BusinessError {
	if m != nil {
		return m.BusinessError
	}
	return nil
}

func (m *Settings) GetProfileSettings() *ProfileSettings {
	if m != nil {
		return m.ProfileSettings
	}
	return nil
}

func (m *Settings) GetServiceSettings() []*ServiceSettings {
	if m != nil {
		return m.ServiceSettings
	}
	return nil
}

type Db struct {
	SlowQueryMillseconds int32 `protobuf:"varint,1,req,name=slow_query_millseconds,json=slowQueryMillseconds" json:"slow_query_millseconds"`
}

func (m *Db) Reset()         { *m = Db{} }
func (m *Db) String() string { return proto.CompactTextString(m) }
func (*Db) ProtoMessage()    {}
func (*Db) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{2}
}
func (m *Db) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Db) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Db.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Db) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Db.Merge(dst, src)
}
func (m *Db) XXX_Size() int {
	return m.Size()
}
func (m *Db) XXX_DiscardUnknown() {
	xxx_messageInfo_Db.DiscardUnknown(m)
}

var xxx_messageInfo_Db proto.InternalMessageInfo

func (m *Db) GetSlowQueryMillseconds() int32 {
	if m != nil {
		return m.SlowQueryMillseconds
	}
	return 0
}

type Trace struct {
	SampleConfig           *TraceSample             `protobuf:"bytes,1,req,name=sample_config,json=sampleConfig" json:"sample_config,omitempty"`
	CustomInstrumentConfig []*TraceCustomInstrument `protobuf:"bytes,2,rep,name=custom_instrument_config,json=customInstrumentConfig" json:"custom_instrument_config,omitempty"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{3}
}
func (m *Trace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(dst, src)
}
func (m *Trace) XXX_Size() int {
	return m.Size()
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetSampleConfig() *TraceSample {
	if m != nil {
		return m.SampleConfig
	}
	return nil
}

func (m *Trace) GetCustomInstrumentConfig() []*TraceCustomInstrument {
	if m != nil {
		return m.CustomInstrumentConfig
	}
	return nil
}

type BusinessError struct {
	HttpErrorCodes        []int32     `protobuf:"varint,1,rep,name=http_error_codes,json=httpErrorCodes" json:"http_error_codes,omitempty"`
	RpcErrorCodes         []string    `protobuf:"bytes,2,rep,name=rpc_error_codes,json=rpcErrorCodes" json:"rpc_error_codes,omitempty"`
	DirectCauseCrashClazz *CrashClazz `protobuf:"bytes,3,opt,name=direct_cause_crash_clazz,json=directCauseCrashClazz" json:"direct_cause_crash_clazz,omitempty"`
}

func (m *BusinessError) Reset()         { *m = BusinessError{} }
func (m *BusinessError) String() string { return proto.CompactTextString(m) }
func (*BusinessError) ProtoMessage()    {}
func (*BusinessError) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{4}
}
func (m *BusinessError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BusinessError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessError.Merge(dst, src)
}
func (m *BusinessError) XXX_Size() int {
	return m.Size()
}
func (m *BusinessError) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessError.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessError proto.InternalMessageInfo

func (m *BusinessError) GetHttpErrorCodes() []int32 {
	if m != nil {
		return m.HttpErrorCodes
	}
	return nil
}

func (m *BusinessError) GetRpcErrorCodes() []string {
	if m != nil {
		return m.RpcErrorCodes
	}
	return nil
}

func (m *BusinessError) GetDirectCauseCrashClazz() *CrashClazz {
	if m != nil {
		return m.DirectCauseCrashClazz
	}
	return nil
}

type CrashClazz struct {
	ClassNames []string `protobuf:"bytes,1,rep,name=class_names,json=classNames" json:"class_names,omitempty"`
	Pattern    string   `protobuf:"bytes,2,req,name=pattern" json:"pattern"`
}

func (m *CrashClazz) Reset()         { *m = CrashClazz{} }
func (m *CrashClazz) String() string { return proto.CompactTextString(m) }
func (*CrashClazz) ProtoMessage()    {}
func (*CrashClazz) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{5}
}
func (m *CrashClazz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrashClazz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrashClazz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CrashClazz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrashClazz.Merge(dst, src)
}
func (m *CrashClazz) XXX_Size() int {
	return m.Size()
}
func (m *CrashClazz) XXX_DiscardUnknown() {
	xxx_messageInfo_CrashClazz.DiscardUnknown(m)
}

var xxx_messageInfo_CrashClazz proto.InternalMessageInfo

func (m *CrashClazz) GetClassNames() []string {
	if m != nil {
		return m.ClassNames
	}
	return nil
}

func (m *CrashClazz) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type ProfileSettings struct {
	Profile []*Profile `protobuf:"bytes,1,rep,name=profile" json:"profile,omitempty"`
}

func (m *ProfileSettings) Reset()         { *m = ProfileSettings{} }
func (m *ProfileSettings) String() string { return proto.CompactTextString(m) }
func (*ProfileSettings) ProtoMessage()    {}
func (*ProfileSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{6}
}
func (m *ProfileSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProfileSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileSettings.Merge(dst, src)
}
func (m *ProfileSettings) XXX_Size() int {
	return m.Size()
}
func (m *ProfileSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileSettings proto.InternalMessageInfo

func (m *ProfileSettings) GetProfile() []*Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type Profile struct {
	ServiceName          string               `protobuf:"bytes,1,req,name=service_name,json=serviceName" json:"service_name"`
	ProfileId            int64                `protobuf:"varint,2,req,name=profile_id,json=profileId" json:"profile_id"`
	RecordType           string               `protobuf:"bytes,3,req,name=record_type,json=recordType" json:"record_type"`
	RecordPeriod         int64                `protobuf:"varint,4,req,name=record_period,json=recordPeriod" json:"record_period"`
	ConfigVersion        int64                `protobuf:"varint,5,req,name=config_version,json=configVersion" json:"config_version"`
	RecordDuration       int64                `protobuf:"varint,10,opt,name=record_duration,json=recordDuration" json:"record_duration"`
	InstanceIdList       []string             `protobuf:"bytes,11,rep,name=instance_id_list,json=instanceIdList" json:"instance_id_list,omitempty"`
	ProfileTypeList      []string             `protobuf:"bytes,12,rep,name=profile_type_list,json=profileTypeList" json:"profile_type_list,omitempty"`
	StartTime            int64                `protobuf:"varint,13,opt,name=start_time,json=startTime" json:"start_time"`
	TriggerConditionList []*TriggerCondition  `protobuf:"bytes,14,rep,name=trigger_condition_list,json=triggerConditionList" json:"trigger_condition_list,omitempty"`
	PtConfigList         []*ProfileTypeConfig `protobuf:"bytes,15,rep,name=pt_config_list,json=ptConfigList" json:"pt_config_list,omitempty"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{7}
}
func (m *Profile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(dst, src)
}
func (m *Profile) XXX_Size() int {
	return m.Size()
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Profile) GetProfileId() int64 {
	if m != nil {
		return m.ProfileId
	}
	return 0
}

func (m *Profile) GetRecordType() string {
	if m != nil {
		return m.RecordType
	}
	return ""
}

func (m *Profile) GetRecordPeriod() int64 {
	if m != nil {
		return m.RecordPeriod
	}
	return 0
}

func (m *Profile) GetConfigVersion() int64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *Profile) GetRecordDuration() int64 {
	if m != nil {
		return m.RecordDuration
	}
	return 0
}

func (m *Profile) GetInstanceIdList() []string {
	if m != nil {
		return m.InstanceIdList
	}
	return nil
}

func (m *Profile) GetProfileTypeList() []string {
	if m != nil {
		return m.ProfileTypeList
	}
	return nil
}

func (m *Profile) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Profile) GetTriggerConditionList() []*TriggerCondition {
	if m != nil {
		return m.TriggerConditionList
	}
	return nil
}

func (m *Profile) GetPtConfigList() []*ProfileTypeConfig {
	if m != nil {
		return m.PtConfigList
	}
	return nil
}

type TraceSample struct {
	Strategy SampleStrategy `protobuf:"varint,1,req,name=strategy,enum=settings_models.SampleStrategy" json:"strategy"`
	Value    float64        `protobuf:"fixed64,2,opt,name=value" json:"value"`
}

func (m *TraceSample) Reset()         { *m = TraceSample{} }
func (m *TraceSample) String() string { return proto.CompactTextString(m) }
func (*TraceSample) ProtoMessage()    {}
func (*TraceSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{8}
}
func (m *TraceSample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceSample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraceSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceSample.Merge(dst, src)
}
func (m *TraceSample) XXX_Size() int {
	return m.Size()
}
func (m *TraceSample) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceSample.DiscardUnknown(m)
}

var xxx_messageInfo_TraceSample proto.InternalMessageInfo

func (m *TraceSample) GetStrategy() SampleStrategy {
	if m != nil {
		return m.Strategy
	}
	return SampleStrategy_ALL
}

func (m *TraceSample) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TraceCustomInstrument struct {
	ClassName            string   `protobuf:"bytes,1,req,name=class_name,json=className" json:"class_name"`
	MethodName           []string `protobuf:"bytes,2,rep,name=method_name,json=methodName" json:"method_name,omitempty"`
	IsCollectArgs        bool     `protobuf:"varint,3,req,name=is_collect_args,json=isCollectArgs" json:"is_collect_args"`
	IsCollectReturn      bool     `protobuf:"varint,4,req,name=is_collect_return,json=isCollectReturn" json:"is_collect_return"`
	IsCollectMetric      bool     `protobuf:"varint,5,req,name=is_collect_metric,json=isCollectMetric" json:"is_collect_metric"`
	CollectedArgTypes    []string `protobuf:"bytes,6,rep,name=collected_arg_types,json=collectedArgTypes" json:"collected_arg_types,omitempty"`
	CollectedObjectDepth int32    `protobuf:"varint,7,req,name=collected_object_depth,json=collectedObjectDepth" json:"collected_object_depth"`
}

func (m *TraceCustomInstrument) Reset()         { *m = TraceCustomInstrument{} }
func (m *TraceCustomInstrument) String() string { return proto.CompactTextString(m) }
func (*TraceCustomInstrument) ProtoMessage()    {}
func (*TraceCustomInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{9}
}
func (m *TraceCustomInstrument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceCustomInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceCustomInstrument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraceCustomInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceCustomInstrument.Merge(dst, src)
}
func (m *TraceCustomInstrument) XXX_Size() int {
	return m.Size()
}
func (m *TraceCustomInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceCustomInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_TraceCustomInstrument proto.InternalMessageInfo

func (m *TraceCustomInstrument) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *TraceCustomInstrument) GetMethodName() []string {
	if m != nil {
		return m.MethodName
	}
	return nil
}

func (m *TraceCustomInstrument) GetIsCollectArgs() bool {
	if m != nil {
		return m.IsCollectArgs
	}
	return false
}

func (m *TraceCustomInstrument) GetIsCollectReturn() bool {
	if m != nil {
		return m.IsCollectReturn
	}
	return false
}

func (m *TraceCustomInstrument) GetIsCollectMetric() bool {
	if m != nil {
		return m.IsCollectMetric
	}
	return false
}

func (m *TraceCustomInstrument) GetCollectedArgTypes() []string {
	if m != nil {
		return m.CollectedArgTypes
	}
	return nil
}

func (m *TraceCustomInstrument) GetCollectedObjectDepth() int32 {
	if m != nil {
		return m.CollectedObjectDepth
	}
	return 0
}

type TriggerCondition struct {
	Key     string  `protobuf:"bytes,1,req,name=key" json:"key"`
	Label   string  `protobuf:"bytes,2,req,name=label" json:"label"`
	Compare string  `protobuf:"bytes,3,req,name=compare" json:"compare"`
	Op      string  `protobuf:"bytes,4,req,name=op" json:"op"`
	Value   float64 `protobuf:"fixed64,5,req,name=value" json:"value"`
	Unit    string  `protobuf:"bytes,6,req,name=unit" json:"unit"`
}

func (m *TriggerCondition) Reset()         { *m = TriggerCondition{} }
func (m *TriggerCondition) String() string { return proto.CompactTextString(m) }
func (*TriggerCondition) ProtoMessage()    {}
func (*TriggerCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{10}
}
func (m *TriggerCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TriggerCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TriggerCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerCondition.Merge(dst, src)
}
func (m *TriggerCondition) XXX_Size() int {
	return m.Size()
}
func (m *TriggerCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerCondition.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerCondition proto.InternalMessageInfo

func (m *TriggerCondition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TriggerCondition) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TriggerCondition) GetCompare() string {
	if m != nil {
		return m.Compare
	}
	return ""
}

func (m *TriggerCondition) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *TriggerCondition) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TriggerCondition) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

type ProfileTypeConfig struct {
	ProfileType     string `protobuf:"bytes,1,req,name=profile_type,json=profileType" json:"profile_type"`
	DurationSeconds int64  `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds" json:"duration_seconds"`
	IsSnapshot      bool   `protobuf:"varint,3,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot"`
}

func (m *ProfileTypeConfig) Reset()         { *m = ProfileTypeConfig{} }
func (m *ProfileTypeConfig) String() string { return proto.CompactTextString(m) }
func (*ProfileTypeConfig) ProtoMessage()    {}
func (*ProfileTypeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_eea2cc344d5887f1, []int{11}
}
func (m *ProfileTypeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileTypeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileTypeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProfileTypeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileTypeConfig.Merge(dst, src)
}
func (m *ProfileTypeConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProfileTypeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileTypeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileTypeConfig proto.InternalMessageInfo

func (m *ProfileTypeConfig) GetProfileType() string {
	if m != nil {
		return m.ProfileType
	}
	return ""
}

func (m *ProfileTypeConfig) GetDurationSeconds() int64 {
	if m != nil {
		return m.DurationSeconds
	}
	return 0
}

func (m *ProfileTypeConfig) GetIsSnapshot() bool {
	if m != nil {
		return m.IsSnapshot
	}
	return false
}

func init() {
	proto.RegisterType((*ServiceSettings)(nil), "settings_models.ServiceSettings")
	proto.RegisterType((*Settings)(nil), "settings_models.Settings")
	proto.RegisterType((*Db)(nil), "settings_models.Db")
	proto.RegisterType((*Trace)(nil), "settings_models.Trace")
	proto.RegisterType((*BusinessError)(nil), "settings_models.BusinessError")
	proto.RegisterType((*CrashClazz)(nil), "settings_models.CrashClazz")
	proto.RegisterType((*ProfileSettings)(nil), "settings_models.ProfileSettings")
	proto.RegisterType((*Profile)(nil), "settings_models.Profile")
	proto.RegisterType((*TraceSample)(nil), "settings_models.TraceSample")
	proto.RegisterType((*TraceCustomInstrument)(nil), "settings_models.TraceCustomInstrument")
	proto.RegisterType((*TriggerCondition)(nil), "settings_models.TriggerCondition")
	proto.RegisterType((*ProfileTypeConfig)(nil), "settings_models.ProfileTypeConfig")
	proto.RegisterEnum("settings_models.SampleStrategy", SampleStrategy_name, SampleStrategy_value)
}
func (m *ServiceSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.ServiceName)))
	i += copy(dAtA[i:], m.ServiceName)
	if m.Settings == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("settings")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.Settings.Size()))
		n1, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Db == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("db")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.Db.Size()))
		n2, err := m.Db.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Trace == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("trace")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.Trace.Size()))
		n3, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.BusinessError != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.BusinessError.Size()))
		n4, err := m.BusinessError.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ProfileSettings != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.ProfileSettings.Size()))
		n5, err := m.ProfileSettings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.ServiceSettings) > 0 {
		for _, msg := range m.ServiceSettings {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintSettings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Db) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Db) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.SlowQueryMillseconds))
	return i, nil
}

func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SampleConfig == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("sample_config")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.SampleConfig.Size()))
		n6, err := m.SampleConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.CustomInstrumentConfig) > 0 {
		for _, msg := range m.CustomInstrumentConfig {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSettings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BusinessError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HttpErrorCodes) > 0 {
		for _, num := range m.HttpErrorCodes {
			dAtA[i] = 0x8
			i++
			i = encodeVarintSettings(dAtA, i, uint64(num))
		}
	}
	if len(m.RpcErrorCodes) > 0 {
		for _, s := range m.RpcErrorCodes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.DirectCauseCrashClazz != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.DirectCauseCrashClazz.Size()))
		n7, err := m.DirectCauseCrashClazz.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CrashClazz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrashClazz) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClassNames) > 0 {
		for _, s := range m.ClassNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.Pattern)))
	i += copy(dAtA[i:], m.Pattern)
	return i, nil
}

func (m *ProfileSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Profile) > 0 {
		for _, msg := range m.Profile {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSettings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.ServiceName)))
	i += copy(dAtA[i:], m.ServiceName)
	dAtA[i] = 0x10
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.ProfileId))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.RecordType)))
	i += copy(dAtA[i:], m.RecordType)
	dAtA[i] = 0x20
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.RecordPeriod))
	dAtA[i] = 0x28
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.ConfigVersion))
	dAtA[i] = 0x50
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.RecordDuration))
	if len(m.InstanceIdList) > 0 {
		for _, s := range m.InstanceIdList {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ProfileTypeList) > 0 {
		for _, s := range m.ProfileTypeList {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x68
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.StartTime))
	if len(m.TriggerConditionList) > 0 {
		for _, msg := range m.TriggerConditionList {
			dAtA[i] = 0x72
			i++
			i = encodeVarintSettings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PtConfigList) > 0 {
		for _, msg := range m.PtConfigList {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintSettings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TraceSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceSample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.Strategy))
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i += 8
	return i, nil
}

func (m *TraceCustomInstrument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceCustomInstrument) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.ClassName)))
	i += copy(dAtA[i:], m.ClassName)
	if len(m.MethodName) > 0 {
		for _, s := range m.MethodName {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x18
	i++
	if m.IsCollectArgs {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x20
	i++
	if m.IsCollectReturn {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x28
	i++
	if m.IsCollectMetric {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.CollectedArgTypes) > 0 {
		for _, s := range m.CollectedArgTypes {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.CollectedObjectDepth))
	return i, nil
}

func (m *TriggerCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x12
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.Label)))
	i += copy(dAtA[i:], m.Label)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.Compare)))
	i += copy(dAtA[i:], m.Compare)
	dAtA[i] = 0x22
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.Op)))
	i += copy(dAtA[i:], m.Op)
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i += 8
	dAtA[i] = 0x32
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.Unit)))
	i += copy(dAtA[i:], m.Unit)
	return i, nil
}

func (m *ProfileTypeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileTypeConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSettings(dAtA, i, uint64(len(m.ProfileType)))
	i += copy(dAtA[i:], m.ProfileType)
	dAtA[i] = 0x10
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.DurationSeconds))
	dAtA[i] = 0x18
	i++
	if m.IsSnapshot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func encodeVarintSettings(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServiceSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	n += 1 + l + sovSettings(uint64(l))
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	return n
}

func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Db != nil {
		l = m.Db.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.BusinessError != nil {
		l = m.BusinessError.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.ProfileSettings != nil {
		l = m.ProfileSettings.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if len(m.ServiceSettings) > 0 {
		for _, e := range m.ServiceSettings {
			l = e.Size()
			n += 2 + l + sovSettings(uint64(l))
		}
	}
	return n
}

func (m *Db) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSettings(uint64(m.SlowQueryMillseconds))
	return n
}

func (m *Trace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SampleConfig != nil {
		l = m.SampleConfig.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if len(m.CustomInstrumentConfig) > 0 {
		for _, e := range m.CustomInstrumentConfig {
			l = e.Size()
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	return n
}

func (m *BusinessError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HttpErrorCodes) > 0 {
		for _, e := range m.HttpErrorCodes {
			n += 1 + sovSettings(uint64(e))
		}
	}
	if len(m.RpcErrorCodes) > 0 {
		for _, s := range m.RpcErrorCodes {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	if m.DirectCauseCrashClazz != nil {
		l = m.DirectCauseCrashClazz.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	return n
}

func (m *CrashClazz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassNames) > 0 {
		for _, s := range m.ClassNames {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	l = len(m.Pattern)
	n += 1 + l + sovSettings(uint64(l))
	return n
}

func (m *ProfileSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profile) > 0 {
		for _, e := range m.Profile {
			l = e.Size()
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	return n
}

func (m *Profile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	n += 1 + l + sovSettings(uint64(l))
	n += 1 + sovSettings(uint64(m.ProfileId))
	l = len(m.RecordType)
	n += 1 + l + sovSettings(uint64(l))
	n += 1 + sovSettings(uint64(m.RecordPeriod))
	n += 1 + sovSettings(uint64(m.ConfigVersion))
	n += 1 + sovSettings(uint64(m.RecordDuration))
	if len(m.InstanceIdList) > 0 {
		for _, s := range m.InstanceIdList {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	if len(m.ProfileTypeList) > 0 {
		for _, s := range m.ProfileTypeList {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	n += 1 + sovSettings(uint64(m.StartTime))
	if len(m.TriggerConditionList) > 0 {
		for _, e := range m.TriggerConditionList {
			l = e.Size()
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	if len(m.PtConfigList) > 0 {
		for _, e := range m.PtConfigList {
			l = e.Size()
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	return n
}

func (m *TraceSample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSettings(uint64(m.Strategy))
	n += 9
	return n
}

func (m *TraceCustomInstrument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassName)
	n += 1 + l + sovSettings(uint64(l))
	if len(m.MethodName) > 0 {
		for _, s := range m.MethodName {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	n += 2
	n += 2
	n += 2
	if len(m.CollectedArgTypes) > 0 {
		for _, s := range m.CollectedArgTypes {
			l = len(s)
			n += 1 + l + sovSettings(uint64(l))
		}
	}
	n += 1 + sovSettings(uint64(m.CollectedObjectDepth))
	return n
}

func (m *TriggerCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovSettings(uint64(l))
	l = len(m.Label)
	n += 1 + l + sovSettings(uint64(l))
	l = len(m.Compare)
	n += 1 + l + sovSettings(uint64(l))
	l = len(m.Op)
	n += 1 + l + sovSettings(uint64(l))
	n += 9
	l = len(m.Unit)
	n += 1 + l + sovSettings(uint64(l))
	return n
}

func (m *ProfileTypeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileType)
	n += 1 + l + sovSettings(uint64(l))
	n += 1 + sovSettings(uint64(m.DurationSeconds))
	n += 2
	return n
}

func sovSettings(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSettings(x uint64) (n int) {
	return sovSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceSettings) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &Settings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("service_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("settings")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Db == nil {
				m.Db = &Db{}
			}
			if err := m.Db.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BusinessError == nil {
				m.BusinessError = &BusinessError{}
			}
			if err := m.BusinessError.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProfileSettings == nil {
				m.ProfileSettings = &ProfileSettings{}
			}
			if err := m.ProfileSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSettings = append(m.ServiceSettings, &ServiceSettings{})
			if err := m.ServiceSettings[len(m.ServiceSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("db")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trace")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Db) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Db: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Db: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowQueryMillseconds", wireType)
			}
			m.SlowQueryMillseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowQueryMillseconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("slow_query_millseconds")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SampleConfig == nil {
				m.SampleConfig = &TraceSample{}
			}
			if err := m.SampleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomInstrumentConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomInstrumentConfig = append(m.CustomInstrumentConfig, &TraceCustomInstrument{})
			if err := m.CustomInstrumentConfig[len(m.CustomInstrumentConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sample_config")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BusinessError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HttpErrorCodes = append(m.HttpErrorCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSettings
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HttpErrorCodes) == 0 {
					m.HttpErrorCodes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSettings
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HttpErrorCodes = append(m.HttpErrorCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpErrorCodes", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcErrorCodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpcErrorCodes = append(m.RpcErrorCodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectCauseCrashClazz", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectCauseCrashClazz == nil {
				m.DirectCauseCrashClazz = &CrashClazz{}
			}
			if err := m.DirectCauseCrashClazz.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrashClazz) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrashClazz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrashClazz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassNames = append(m.ClassNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("pattern")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = append(m.Profile, &Profile{})
			if err := m.Profile[len(m.Profile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			m.ProfileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordPeriod", wireType)
			}
			m.RecordPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordPeriod |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigVersion", wireType)
			}
			m.ConfigVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordDuration", wireType)
			}
			m.RecordDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIdList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceIdList = append(m.InstanceIdList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileTypeList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileTypeList = append(m.ProfileTypeList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerConditionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggerConditionList = append(m.TriggerConditionList, &TriggerCondition{})
			if err := m.TriggerConditionList[len(m.TriggerConditionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtConfigList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PtConfigList = append(m.PtConfigList, &ProfileTypeConfig{})
			if err := m.PtConfigList[len(m.PtConfigList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("service_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("profile_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("record_type")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("record_period")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("config_version")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceSample) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= (SampleStrategy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strategy")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceCustomInstrument) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceCustomInstrument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceCustomInstrument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = append(m.MethodName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollectArgs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollectArgs = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollectReturn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollectReturn = bool(v != 0)
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollectMetric", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollectMetric = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedArgTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectedArgTypes = append(m.CollectedArgTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedObjectDepth", wireType)
			}
			m.CollectedObjectDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectedObjectDepth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("class_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_collect_args")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_collect_return")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("is_collect_metric")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("collected_object_depth")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerCondition) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("key")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("label")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("compare")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("op")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("unit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileTypeConfig) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileTypeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileTypeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationSeconds", wireType)
			}
			m.DurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationSeconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSnapshot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("profile_type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSettings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSettings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSettings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettings   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("settings.proto", fileDescriptor_settings_eea2cc344d5887f1) }

var fileDescriptor_settings_eea2cc344d5887f1 = []byte{
	// 1123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4d, 0x6f, 0x23, 0x45,
	0x10, 0xcd, 0x8c, 0xe3, 0x4d, 0x5c, 0xfe, 0x4c, 0x6f, 0x36, 0x1a, 0x3e, 0xe4, 0x98, 0x89, 0x76,
	0x31, 0xcb, 0x12, 0x90, 0x25, 0x2e, 0x70, 0x00, 0xc7, 0x89, 0x84, 0x45, 0xc2, 0x86, 0xb1, 0x05,
	0xc7, 0x61, 0x3c, 0xd3, 0xeb, 0x34, 0xcc, 0xd7, 0x76, 0xb7, 0x83, 0xbc, 0xbf, 0x82, 0x03, 0xff,
	0x80, 0x2b, 0x27, 0x2e, 0xdc, 0x38, 0xef, 0x71, 0x8f, 0x48, 0x48, 0x08, 0x25, 0x7f, 0x04, 0x75,
	0xf7, 0xf4, 0x78, 0xc6, 0xce, 0x4a, 0x7b, 0xf3, 0xbc, 0x7a, 0x55, 0xdd, 0xd5, 0xf5, 0x5e, 0x19,
	0x5a, 0x0c, 0x73, 0x4e, 0xe2, 0x39, 0x3b, 0x4e, 0x69, 0xc2, 0x13, 0xd4, 0xd6, 0xdf, 0x6e, 0x94,
	0x04, 0x38, 0x64, 0xf6, 0x73, 0x68, 0x4f, 0x30, 0xbd, 0x26, 0x3e, 0x9e, 0x64, 0x11, 0xf4, 0x3e,
	0x34, 0x98, 0x82, 0xdc, 0xd8, 0x8b, 0xb0, 0x65, 0xf4, 0xcc, 0x7e, 0xed, 0x64, 0xfb, 0xe5, 0xbf,
	0x87, 0x5b, 0x4e, 0x3d, 0x8b, 0x7c, 0xe3, 0x45, 0x18, 0x7d, 0x0a, 0xbb, 0xba, 0x9c, 0x65, 0xf6,
	0xcc, 0x7e, 0x7d, 0xf0, 0xd6, 0xf1, 0x5a, 0xfd, 0x63, 0x5d, 0xd5, 0xc9, 0xa9, 0xf6, 0x5f, 0x26,
	0xec, 0xe6, 0x87, 0x1d, 0x81, 0x19, 0xcc, 0xe4, 0x11, 0xf5, 0xc1, 0xfd, 0x8d, 0xec, 0xd3, 0x99,
	0x63, 0x06, 0x33, 0xf4, 0x04, 0xaa, 0x9c, 0x7a, 0x3e, 0xce, 0x4e, 0x39, 0xd8, 0xe0, 0x4d, 0x45,
	0xd4, 0x51, 0x24, 0x74, 0x06, 0xad, 0xd9, 0x82, 0x91, 0x18, 0x33, 0xe6, 0x62, 0x4a, 0x13, 0x6a,
	0x55, 0x7a, 0x46, 0xbf, 0x3e, 0xe8, 0x6e, 0xa4, 0x9d, 0x64, 0xb4, 0x33, 0xc1, 0x72, 0x9a, 0xb3,
	0xe2, 0x27, 0xfa, 0x1a, 0x3a, 0x29, 0x4d, 0x9e, 0x91, 0x10, 0xbb, 0x79, 0x97, 0xdb, 0xb2, 0x50,
	0x6f, 0xa3, 0xd0, 0xa5, 0x22, 0xe6, 0xcd, 0xb6, 0xd3, 0x32, 0x20, 0x8a, 0xe9, 0x37, 0xcd, 0x8b,
	0x05, 0xbd, 0xca, 0x9d, 0xc5, 0xd6, 0xe6, 0xe1, 0xb4, 0x59, 0x19, 0xb0, 0xbf, 0x04, 0xf3, 0x74,
	0x86, 0x3e, 0x83, 0x03, 0x16, 0x26, 0x3f, 0xbb, 0xcf, 0x17, 0x98, 0x2e, 0xdd, 0x88, 0x84, 0x21,
	0xc3, 0x7e, 0x12, 0x07, 0x4c, 0xbe, 0x66, 0x35, 0x1b, 0xd8, 0xbe, 0xe0, 0x7c, 0x2b, 0x28, 0x17,
	0x2b, 0x86, 0xfd, 0xbb, 0x01, 0x55, 0xf9, 0x66, 0x68, 0x08, 0x4d, 0xe6, 0x45, 0x69, 0x88, 0x5d,
	0x3f, 0x89, 0x9f, 0x91, 0x79, 0x36, 0x8a, 0x77, 0xef, 0x7e, 0xe2, 0x89, 0xa4, 0x3a, 0x0d, 0x95,
	0x32, 0x92, 0x19, 0xe8, 0x07, 0xb0, 0xfc, 0x05, 0xe3, 0x49, 0xe4, 0x92, 0x98, 0x71, 0xba, 0x88,
	0x70, 0xcc, 0x75, 0x35, 0x53, 0xf6, 0xf8, 0xe8, 0xee, 0x6a, 0x23, 0x99, 0x35, 0xce, 0x93, 0x9c,
	0x03, 0x7f, 0x0d, 0x51, 0x27, 0xd8, 0x7f, 0x1a, 0xd0, 0x2c, 0xcd, 0x0a, 0xf5, 0xa1, 0x73, 0xc5,
	0x79, 0xaa, 0xe6, 0xeb, 0xfa, 0x49, 0x80, 0x45, 0xdb, 0x95, 0x7e, 0xd5, 0x69, 0x09, 0x5c, 0x92,
	0x46, 0x02, 0x45, 0x8f, 0xa0, 0x4d, 0x53, 0xbf, 0x44, 0x14, 0x97, 0xaa, 0x39, 0x4d, 0x9a, 0xfa,
	0x05, 0xde, 0x14, 0xac, 0x80, 0x50, 0xec, 0x73, 0xd7, 0xf7, 0x16, 0x0c, 0xbb, 0x3e, 0xf5, 0xd8,
	0x95, 0xeb, 0x87, 0xde, 0x8b, 0x17, 0x99, 0x7e, 0xde, 0xd9, 0xe8, 0x62, 0x24, 0x38, 0x23, 0x41,
	0x71, 0x1e, 0xa8, 0xe4, 0x91, 0xc8, 0x5d, 0xc1, 0xf6, 0x05, 0xc0, 0xea, 0x0b, 0x1d, 0x42, 0xdd,
	0x0f, 0x3d, 0xc6, 0xa4, 0xaf, 0xd4, 0x85, 0x6b, 0x0e, 0x48, 0x48, 0x18, 0x8a, 0xa1, 0x2e, 0xec,
	0xa4, 0x1e, 0xe7, 0x98, 0xc6, 0x52, 0xea, 0xda, 0x75, 0x1a, 0xb4, 0xcf, 0xa0, 0xbd, 0x26, 0x35,
	0x34, 0x80, 0x9d, 0x4c, 0x6c, 0xb2, 0x5e, 0x7d, 0x60, 0xbd, 0x4e, 0x9d, 0x8e, 0x26, 0xda, 0xbf,
	0x6d, 0xc3, 0x4e, 0x06, 0xbe, 0xb9, 0xdb, 0x8f, 0x00, 0xb4, 0x1f, 0x48, 0x20, 0xaf, 0x57, 0xc9,
	0x68, 0xb5, 0x0c, 0x1f, 0x07, 0xe8, 0x21, 0xd4, 0x29, 0xf6, 0x13, 0x1a, 0xb8, 0x7c, 0x99, 0x62,
	0xab, 0x52, 0x28, 0x06, 0x2a, 0x30, 0x5d, 0xa6, 0x18, 0x7d, 0x00, 0xcd, 0x8c, 0x96, 0x62, 0x4a,
	0x92, 0xc0, 0xda, 0x2e, 0x94, 0x6b, 0xa8, 0xd0, 0xa5, 0x8c, 0xa0, 0x0f, 0xa1, 0xa5, 0xb4, 0xe4,
	0x5e, 0x63, 0xca, 0x48, 0x12, 0x5b, 0xd5, 0x02, 0xb7, 0xa9, 0x62, 0xdf, 0xa9, 0x10, 0xfa, 0x08,
	0xda, 0x59, 0xdd, 0x60, 0x41, 0x3d, 0x2e, 0xd8, 0xd0, 0x33, 0x72, 0x76, 0x4b, 0x05, 0x4f, 0xb3,
	0x98, 0x50, 0x91, 0x90, 0xac, 0x17, 0xfb, 0xa2, 0x27, 0x37, 0x24, 0x8c, 0x5b, 0x75, 0x39, 0x94,
	0x96, 0xc6, 0xc7, 0xc1, 0x39, 0x61, 0x1c, 0x3d, 0x86, 0x3d, 0xdd, 0xbc, 0x68, 0x4c, 0x51, 0x1b,
	0x92, 0xaa, 0xbd, 0x2e, 0x1a, 0x93, 0xdc, 0x23, 0x00, 0xc6, 0x3d, 0xca, 0x5d, 0x4e, 0x22, 0x6c,
	0x35, 0x0b, 0xe7, 0xd7, 0x24, 0x3e, 0x25, 0x11, 0x46, 0xdf, 0xc3, 0x01, 0xa7, 0x64, 0x3e, 0xc7,
	0x42, 0x94, 0x71, 0x40, 0xc4, 0x7d, 0x54, 0xd5, 0x96, 0x9c, 0xe2, 0x7b, 0x77, 0x58, 0x46, 0xd2,
	0x47, 0x9a, 0xed, 0xec, 0xf3, 0x35, 0x44, 0x9e, 0xfe, 0x15, 0xb4, 0x52, 0x6d, 0x3f, 0x55, 0xb0,
	0x2d, 0x0b, 0xda, 0xaf, 0x93, 0x85, 0xb8, 0xb7, 0xf2, 0x99, 0xd3, 0x48, 0x33, 0xc7, 0x89, 0x4a,
	0x76, 0x08, 0xf5, 0x82, 0xe9, 0xd1, 0x10, 0x76, 0x19, 0xa7, 0x1e, 0xc7, 0xf3, 0xa5, 0x14, 0x49,
	0x6b, 0x70, 0xb8, 0xb9, 0xba, 0x24, 0x75, 0x92, 0xd1, 0xb2, 0xae, 0xf3, 0x34, 0xf4, 0x36, 0x54,
	0xaf, 0xbd, 0x70, 0x21, 0xf6, 0xb8, 0xd1, 0x37, 0xb2, 0xb0, 0x82, 0xec, 0x7f, 0x4c, 0x78, 0x70,
	0xe7, 0x56, 0x10, 0xef, 0xb9, 0x72, 0x4d, 0x49, 0x9f, 0xb5, 0xdc, 0x3a, 0xc2, 0x5a, 0x11, 0xe6,
	0x57, 0x49, 0xa0, 0x58, 0xca, 0xe2, 0xa0, 0x20, 0x49, 0x78, 0x02, 0x6d, 0xc2, 0x5c, 0x3f, 0x09,
	0x43, 0xe1, 0x71, 0x8f, 0xce, 0x99, 0x54, 0xe7, 0xae, 0x16, 0x12, 0x61, 0x23, 0x15, 0x1b, 0xd2,
	0x39, 0x43, 0x9f, 0xc0, 0x5e, 0x81, 0x4d, 0x31, 0x5f, 0xd0, 0x58, 0x8a, 0x54, 0xf3, 0xdb, 0x39,
	0xdf, 0x91, 0xc1, 0xb5, 0x8c, 0x08, 0x73, 0x4a, 0x7c, 0x29, 0xd5, 0xcd, 0x8c, 0x0b, 0x19, 0x44,
	0xc7, 0x70, 0x3f, 0xa3, 0xe3, 0x40, 0x5c, 0x48, 0x2a, 0x8b, 0x59, 0xf7, 0xe4, 0xd5, 0xf7, 0xf2,
	0xd0, 0x90, 0xce, 0xc5, 0x88, 0x98, 0x58, 0xf8, 0x2b, 0x7e, 0x32, 0xfb, 0x51, 0x9c, 0x13, 0xe0,
	0x94, 0x5f, 0x59, 0x3b, 0xc5, 0x85, 0x9f, 0x73, 0x9e, 0x4a, 0xca, 0xa9, 0x60, 0xd8, 0x7f, 0x18,
	0xd0, 0x59, 0x17, 0x10, 0x3a, 0x80, 0xca, 0x4f, 0x78, 0x59, 0x7a, 0x51, 0x01, 0x88, 0x31, 0x85,
	0xde, 0x0c, 0x87, 0xa5, 0x1d, 0xa4, 0x20, 0xb1, 0xa1, 0xfc, 0x24, 0x4a, 0x3d, 0x5a, 0x36, 0xb7,
	0x06, 0xd1, 0x3e, 0x98, 0x49, 0x2a, 0x5f, 0x4a, 0x87, 0xcc, 0x24, 0x5d, 0x0d, 0x5e, 0x3c, 0x48,
	0x79, 0xf0, 0xc8, 0x82, 0xed, 0x45, 0x4c, 0xb8, 0x75, 0xaf, 0x90, 0x23, 0x11, 0xfb, 0x57, 0x03,
	0xf6, 0x36, 0x44, 0x2a, 0x16, 0x56, 0xd1, 0x8a, 0xe5, 0x85, 0x55, 0xf0, 0x22, 0xfa, 0x18, 0x3a,
	0x7a, 0x0b, 0xb8, 0xfa, 0xaf, 0xd1, 0x2c, 0xb8, 0xb1, 0xad, 0xa3, 0x13, 0x15, 0x14, 0xcb, 0x8b,
	0x30, 0x97, 0xc5, 0x5e, 0xca, 0xae, 0x12, 0x2e, 0xb7, 0xbe, 0x1e, 0x1e, 0x10, 0x36, 0xc9, 0xf0,
	0xc7, 0x9f, 0x43, 0xab, 0xac, 0x73, 0xb4, 0x03, 0x95, 0xe1, 0xf9, 0x79, 0x67, 0x0b, 0x75, 0xa0,
	0x31, 0x19, 0x5e, 0x5c, 0x9e, 0x9f, 0xb9, 0xce, 0x70, 0x3a, 0x7e, 0xda, 0x31, 0x50, 0x0b, 0xc0,
	0x19, 0x4e, 0xcf, 0xdc, 0xf3, 0xf1, 0xc5, 0x78, 0xda, 0x31, 0x4f, 0xbe, 0x78, 0x79, 0xd3, 0x35,
	0x5e, 0xdd, 0x74, 0x8d, 0xff, 0x6e, 0xba, 0xc6, 0x2f, 0xb7, 0xdd, 0xad, 0x57, 0xb7, 0xdd, 0xad,
	0xbf, 0x6f, 0xbb, 0x5b, 0xf0, 0xd0, 0x4f, 0xa2, 0xe3, 0xd9, 0x92, 0xe3, 0x40, 0xec, 0x1d, 0xf9,
	0xcb, 0x4b, 0xa3, 0x75, 0x8b, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xc0, 0x21, 0x7f, 0xd2,
	0x09, 0x00, 0x00,
}
