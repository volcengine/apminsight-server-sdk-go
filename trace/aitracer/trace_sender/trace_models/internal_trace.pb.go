// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal_trace.proto

package trace_models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SpanType int32

const (
	SpanType_Common SpanType = 0
	SpanType_Server SpanType = 1
	SpanType_Client SpanType = 2
)

var SpanType_name = map[int32]string{
	0: "Common",
	1: "Server",
	2: "Client",
}
var SpanType_value = map[string]int32{
	"Common": 0,
	"Server": 1,
	"Client": 2,
}

func (x SpanType) Enum() *SpanType {
	p := new(SpanType)
	*p = x
	return p
}
func (x SpanType) String() string {
	return proto.EnumName(SpanType_name, int32(x))
}
func (x *SpanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpanType_value, data, "SpanType")
	if err != nil {
		return err
	}
	*x = SpanType(value)
	return nil
}
func (SpanType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{0}
}

type ErrorType int32

const (
	ErrorType_DbError              ErrorType = 0
	ErrorType_ExternalServiceError ErrorType = 1
	ErrorType_HttpCodeError        ErrorType = 2
	ErrorType_NoSqlError           ErrorType = 3
	ErrorType_MqError              ErrorType = 4
	ErrorType_UncaughtException    ErrorType = 5
	ErrorType_BusinessError        ErrorType = 6
	ErrorType_Panic                ErrorType = 7
)

var ErrorType_name = map[int32]string{
	0: "DbError",
	1: "ExternalServiceError",
	2: "HttpCodeError",
	3: "NoSqlError",
	4: "MqError",
	5: "UncaughtException",
	6: "BusinessError",
	7: "Panic",
}
var ErrorType_value = map[string]int32{
	"DbError":              0,
	"ExternalServiceError": 1,
	"HttpCodeError":        2,
	"NoSqlError":           3,
	"MqError":              4,
	"UncaughtException":    5,
	"BusinessError":        6,
	"Panic":                7,
}

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}
func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (x *ErrorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorType_value, data, "ErrorType")
	if err != nil {
		return err
	}
	*x = ErrorType(value)
	return nil
}
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{1}
}

type ErrorTag int32

const (
	ErrorTag_ServerError ErrorTag = 1
	ErrorTag_Error       ErrorTag = 2
)

var ErrorTag_name = map[int32]string{
	1: "ServerError",
	2: "Error",
}
var ErrorTag_value = map[string]int32{
	"ServerError": 1,
	"Error":       2,
}

func (x ErrorTag) Enum() *ErrorTag {
	p := new(ErrorTag)
	*p = x
	return p
}
func (x ErrorTag) String() string {
	return proto.EnumName(ErrorTag_name, int32(x))
}
func (x *ErrorTag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorTag_value, data, "ErrorTag")
	if err != nil {
		return err
	}
	*x = ErrorTag(value)
	return nil
}
func (ErrorTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{2}
}

type TraceCollect struct {
	Traces   [][]byte `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
	Hostname string   `protobuf:"bytes,2,req,name=hostname" json:"hostname"`
}

func (m *TraceCollect) Reset()         { *m = TraceCollect{} }
func (m *TraceCollect) String() string { return proto.CompactTextString(m) }
func (*TraceCollect) ProtoMessage()    {}
func (*TraceCollect) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{0}
}
func (m *TraceCollect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceCollect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceCollect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraceCollect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceCollect.Merge(dst, src)
}
func (m *TraceCollect) XXX_Size() int {
	return m.Size()
}
func (m *TraceCollect) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceCollect.DiscardUnknown(m)
}

var xxx_messageInfo_TraceCollect proto.InternalMessageInfo

func (m *TraceCollect) GetTraces() [][]byte {
	if m != nil {
		return m.Traces
	}
	return nil
}

func (m *TraceCollect) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type Trace struct {
	ServiceType      string  `protobuf:"bytes,1,req,name=service_type,json=serviceType" json:"service_type"`
	Service          string  `protobuf:"bytes,2,req,name=service" json:"service"`
	TraceId          string  `protobuf:"bytes,3,req,name=trace_id,json=traceId" json:"trace_id"`
	Env              string  `protobuf:"bytes,4,req,name=env" json:"env"`
	Spans            []*Span `protobuf:"bytes,5,rep,name=spans" json:"spans,omitempty"`
	ContainerId      string  `protobuf:"bytes,6,opt,name=container_id,json=containerId" json:"container_id"`
	Pid              int64   `protobuf:"varint,7,opt,name=pid" json:"pid"`
	ProcessStartTime int64   `protobuf:"varint,8,opt,name=process_start_time,json=processStartTime" json:"process_start_time"`
	InstanceId       string  `protobuf:"bytes,9,opt,name=instance_id,json=instanceId" json:"instance_id"`
	AppId            string  `protobuf:"bytes,64,opt,name=app_id,json=appId" json:"app_id"`
	Hostname         string  `protobuf:"bytes,65,opt,name=hostname" json:"hostname"`
	ApiTimeSeconds   int64   `protobuf:"varint,66,opt,name=api_time_seconds,json=apiTimeSeconds" json:"api_time_seconds"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{1}
}
func (m *Trace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(dst, src)
}
func (m *Trace) XXX_Size() int {
	return m.Size()
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *Trace) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Trace) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *Trace) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *Trace) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *Trace) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Trace) GetProcessStartTime() int64 {
	if m != nil {
		return m.ProcessStartTime
	}
	return 0
}

func (m *Trace) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *Trace) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Trace) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Trace) GetApiTimeSeconds() int64 {
	if m != nil {
		return m.ApiTimeSeconds
	}
	return 0
}

type Span struct {
	SpanId               string             `protobuf:"bytes,1,req,name=span_id,json=spanId" json:"span_id"`
	ParentSpanId         string             `protobuf:"bytes,2,req,name=parent_span_id,json=parentSpanId" json:"parent_span_id"`
	OperationName        string             `protobuf:"bytes,3,req,name=operation_name,json=operationName" json:"operation_name"`
	StartTimeMillisecond int64              `protobuf:"varint,4,req,name=start_time_millisecond,json=startTimeMillisecond" json:"start_time_millisecond"`
	EndTimeMillisecond   int64              `protobuf:"varint,5,req,name=end_time_millisecond,json=endTimeMillisecond" json:"end_time_millisecond"`
	DurationMicroseconds int64              `protobuf:"varint,6,req,name=duration_microseconds,json=durationMicroseconds" json:"duration_microseconds"`
	Status               int64              `protobuf:"varint,7,req,name=status" json:"status"`
	SpanType             SpanType           `protobuf:"varint,8,req,name=span_type,json=spanType,enum=trace_models.SpanType" json:"span_type"`
	StartTimeMicrosecond int64              `protobuf:"varint,9,req,name=start_time_microsecond,json=startTimeMicrosecond" json:"start_time_microsecond"`
	ParamInt             map[string]int64   `protobuf:"bytes,20,rep,name=param_int,json=paramInt" json:"param_int,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ParamFloat           map[string]float64 `protobuf:"bytes,21,rep,name=param_float,json=paramFloat" json:"param_float,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	ParamString          map[string]string  `protobuf:"bytes,22,rep,name=param_string,json=paramString" json:"param_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resource             string             `protobuf:"bytes,40,opt,name=resource" json:"resource"`
	CallServiceType      string             `protobuf:"bytes,60,opt,name=call_service_type,json=callServiceType" json:"call_service_type"`
	CallService          string             `protobuf:"bytes,61,opt,name=call_service,json=callService" json:"call_service"`
	CallResource         string             `protobuf:"bytes,62,opt,name=call_resource,json=callResource" json:"call_resource"`
	ErrorInfoList        []*ErrorInfo       `protobuf:"bytes,70,rep,name=error_info_list,json=errorInfoList" json:"error_info_list,omitempty"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{2}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(dst, src)
}
func (m *Span) XXX_Size() int {
	return m.Size()
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *Span) GetParentSpanId() string {
	if m != nil {
		return m.ParentSpanId
	}
	return ""
}

func (m *Span) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *Span) GetStartTimeMillisecond() int64 {
	if m != nil {
		return m.StartTimeMillisecond
	}
	return 0
}

func (m *Span) GetEndTimeMillisecond() int64 {
	if m != nil {
		return m.EndTimeMillisecond
	}
	return 0
}

func (m *Span) GetDurationMicroseconds() int64 {
	if m != nil {
		return m.DurationMicroseconds
	}
	return 0
}

func (m *Span) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Span) GetSpanType() SpanType {
	if m != nil {
		return m.SpanType
	}
	return SpanType_Common
}

func (m *Span) GetStartTimeMicrosecond() int64 {
	if m != nil {
		return m.StartTimeMicrosecond
	}
	return 0
}

func (m *Span) GetParamInt() map[string]int64 {
	if m != nil {
		return m.ParamInt
	}
	return nil
}

func (m *Span) GetParamFloat() map[string]float64 {
	if m != nil {
		return m.ParamFloat
	}
	return nil
}

func (m *Span) GetParamString() map[string]string {
	if m != nil {
		return m.ParamString
	}
	return nil
}

func (m *Span) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Span) GetCallServiceType() string {
	if m != nil {
		return m.CallServiceType
	}
	return ""
}

func (m *Span) GetCallService() string {
	if m != nil {
		return m.CallService
	}
	return ""
}

func (m *Span) GetCallResource() string {
	if m != nil {
		return m.CallResource
	}
	return ""
}

func (m *Span) GetErrorInfoList() []*ErrorInfo {
	if m != nil {
		return m.ErrorInfoList
	}
	return nil
}

type ErrorInfo struct {
	ErrorKind      ErrorType         `protobuf:"varint,1,opt,name=error_kind,json=errorKind,enum=trace_models.ErrorType" json:"error_kind"`
	ErrorMessage   string            `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message"`
	ErrorStack     []string          `protobuf:"bytes,3,rep,name=error_stack,json=errorStack" json:"error_stack,omitempty"`
	ErrorOccurTime int64             `protobuf:"varint,4,opt,name=error_occur_time,json=errorOccurTime" json:"error_occur_time"`
	ErrorTags      map[string]string `protobuf:"bytes,256,rep,name=error_tags,json=errorTags" json:"error_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ErrorInfo) Reset()         { *m = ErrorInfo{} }
func (m *ErrorInfo) String() string { return proto.CompactTextString(m) }
func (*ErrorInfo) ProtoMessage()    {}
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_trace_04883c2397d91b0d, []int{3}
}
func (m *ErrorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ErrorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorInfo.Merge(dst, src)
}
func (m *ErrorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ErrorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorInfo proto.InternalMessageInfo

func (m *ErrorInfo) GetErrorKind() ErrorType {
	if m != nil {
		return m.ErrorKind
	}
	return ErrorType_DbError
}

func (m *ErrorInfo) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ErrorInfo) GetErrorStack() []string {
	if m != nil {
		return m.ErrorStack
	}
	return nil
}

func (m *ErrorInfo) GetErrorOccurTime() int64 {
	if m != nil {
		return m.ErrorOccurTime
	}
	return 0
}

func (m *ErrorInfo) GetErrorTags() map[string]string {
	if m != nil {
		return m.ErrorTags
	}
	return nil
}

func init() {
	proto.RegisterType((*TraceCollect)(nil), "trace_models.TraceCollect")
	proto.RegisterType((*Trace)(nil), "trace_models.Trace")
	proto.RegisterType((*Span)(nil), "trace_models.Span")
	proto.RegisterMapType((map[string]float64)(nil), "trace_models.Span.ParamFloatEntry")
	proto.RegisterMapType((map[string]int64)(nil), "trace_models.Span.ParamIntEntry")
	proto.RegisterMapType((map[string]string)(nil), "trace_models.Span.ParamStringEntry")
	proto.RegisterType((*ErrorInfo)(nil), "trace_models.ErrorInfo")
	proto.RegisterMapType((map[string]string)(nil), "trace_models.ErrorInfo.ErrorTagsEntry")
	proto.RegisterEnum("trace_models.SpanType", SpanType_name, SpanType_value)
	proto.RegisterEnum("trace_models.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterEnum("trace_models.ErrorTag", ErrorTag_name, ErrorTag_value)
}
func (m *TraceCollect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceCollect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Traces) > 0 {
		for _, b := range m.Traces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.Hostname)))
	i += copy(dAtA[i:], m.Hostname)
	return i, nil
}

func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.ServiceType)))
	i += copy(dAtA[i:], m.ServiceType)
	dAtA[i] = 0x12
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.Service)))
	i += copy(dAtA[i:], m.Service)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.TraceId)))
	i += copy(dAtA[i:], m.TraceId)
	dAtA[i] = 0x22
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.Env)))
	i += copy(dAtA[i:], m.Env)
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.ContainerId)))
	i += copy(dAtA[i:], m.ContainerId)
	dAtA[i] = 0x38
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.Pid))
	dAtA[i] = 0x40
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.ProcessStartTime))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.InstanceId)))
	i += copy(dAtA[i:], m.InstanceId)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.AppId)))
	i += copy(dAtA[i:], m.AppId)
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.Hostname)))
	i += copy(dAtA[i:], m.Hostname)
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x4
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.ApiTimeSeconds))
	return i, nil
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.SpanId)))
	i += copy(dAtA[i:], m.SpanId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.ParentSpanId)))
	i += copy(dAtA[i:], m.ParentSpanId)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.OperationName)))
	i += copy(dAtA[i:], m.OperationName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.StartTimeMillisecond))
	dAtA[i] = 0x28
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.EndTimeMillisecond))
	dAtA[i] = 0x30
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.DurationMicroseconds))
	dAtA[i] = 0x38
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x40
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.SpanType))
	dAtA[i] = 0x48
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.StartTimeMicrosecond))
	if len(m.ParamInt) > 0 {
		for k, _ := range m.ParamInt {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			v := m.ParamInt[k]
			mapSize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + sovInternalTrace(uint64(v))
			i = encodeVarintInternalTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(v))
		}
	}
	if len(m.ParamFloat) > 0 {
		for k, _ := range m.ParamFloat {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			v := m.ParamFloat[k]
			mapSize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + 8
			i = encodeVarintInternalTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	if len(m.ParamString) > 0 {
		for k, _ := range m.ParamString {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			v := m.ParamString[k]
			mapSize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + len(v) + sovInternalTrace(uint64(len(v)))
			i = encodeVarintInternalTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.Resource)))
	i += copy(dAtA[i:], m.Resource)
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.CallServiceType)))
	i += copy(dAtA[i:], m.CallServiceType)
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.CallService)))
	i += copy(dAtA[i:], m.CallService)
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.CallResource)))
	i += copy(dAtA[i:], m.CallResource)
	if len(m.ErrorInfoList) > 0 {
		for _, msg := range m.ErrorInfoList {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ErrorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.ErrorKind))
	dAtA[i] = 0x12
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(len(m.ErrorMessage)))
	i += copy(dAtA[i:], m.ErrorMessage)
	if len(m.ErrorStack) > 0 {
		for _, s := range m.ErrorStack {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintInternalTrace(dAtA, i, uint64(m.ErrorOccurTime))
	if len(m.ErrorTags) > 0 {
		for k, _ := range m.ErrorTags {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x10
			i++
			v := m.ErrorTags[k]
			mapSize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + len(v) + sovInternalTrace(uint64(len(v)))
			i = encodeVarintInternalTrace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintInternalTrace(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintInternalTrace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceCollect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Traces) > 0 {
		for _, b := range m.Traces {
			l = len(b)
			n += 1 + l + sovInternalTrace(uint64(l))
		}
	}
	l = len(m.Hostname)
	n += 1 + l + sovInternalTrace(uint64(l))
	return n
}

func (m *Trace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceType)
	n += 1 + l + sovInternalTrace(uint64(l))
	l = len(m.Service)
	n += 1 + l + sovInternalTrace(uint64(l))
	l = len(m.TraceId)
	n += 1 + l + sovInternalTrace(uint64(l))
	l = len(m.Env)
	n += 1 + l + sovInternalTrace(uint64(l))
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovInternalTrace(uint64(l))
		}
	}
	l = len(m.ContainerId)
	n += 1 + l + sovInternalTrace(uint64(l))
	n += 1 + sovInternalTrace(uint64(m.Pid))
	n += 1 + sovInternalTrace(uint64(m.ProcessStartTime))
	l = len(m.InstanceId)
	n += 1 + l + sovInternalTrace(uint64(l))
	l = len(m.AppId)
	n += 2 + l + sovInternalTrace(uint64(l))
	l = len(m.Hostname)
	n += 2 + l + sovInternalTrace(uint64(l))
	n += 2 + sovInternalTrace(uint64(m.ApiTimeSeconds))
	return n
}

func (m *Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpanId)
	n += 1 + l + sovInternalTrace(uint64(l))
	l = len(m.ParentSpanId)
	n += 1 + l + sovInternalTrace(uint64(l))
	l = len(m.OperationName)
	n += 1 + l + sovInternalTrace(uint64(l))
	n += 1 + sovInternalTrace(uint64(m.StartTimeMillisecond))
	n += 1 + sovInternalTrace(uint64(m.EndTimeMillisecond))
	n += 1 + sovInternalTrace(uint64(m.DurationMicroseconds))
	n += 1 + sovInternalTrace(uint64(m.Status))
	n += 1 + sovInternalTrace(uint64(m.SpanType))
	n += 1 + sovInternalTrace(uint64(m.StartTimeMicrosecond))
	if len(m.ParamInt) > 0 {
		for k, v := range m.ParamInt {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + sovInternalTrace(uint64(v))
			n += mapEntrySize + 2 + sovInternalTrace(uint64(mapEntrySize))
		}
	}
	if len(m.ParamFloat) > 0 {
		for k, v := range m.ParamFloat {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 2 + sovInternalTrace(uint64(mapEntrySize))
		}
	}
	if len(m.ParamString) > 0 {
		for k, v := range m.ParamString {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + len(v) + sovInternalTrace(uint64(len(v)))
			n += mapEntrySize + 2 + sovInternalTrace(uint64(mapEntrySize))
		}
	}
	l = len(m.Resource)
	n += 2 + l + sovInternalTrace(uint64(l))
	l = len(m.CallServiceType)
	n += 2 + l + sovInternalTrace(uint64(l))
	l = len(m.CallService)
	n += 2 + l + sovInternalTrace(uint64(l))
	l = len(m.CallResource)
	n += 2 + l + sovInternalTrace(uint64(l))
	if len(m.ErrorInfoList) > 0 {
		for _, e := range m.ErrorInfoList {
			l = e.Size()
			n += 2 + l + sovInternalTrace(uint64(l))
		}
	}
	return n
}

func (m *ErrorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovInternalTrace(uint64(m.ErrorKind))
	l = len(m.ErrorMessage)
	n += 1 + l + sovInternalTrace(uint64(l))
	if len(m.ErrorStack) > 0 {
		for _, s := range m.ErrorStack {
			l = len(s)
			n += 1 + l + sovInternalTrace(uint64(l))
		}
	}
	n += 1 + sovInternalTrace(uint64(m.ErrorOccurTime))
	if len(m.ErrorTags) > 0 {
		for k, v := range m.ErrorTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovInternalTrace(uint64(len(k))) + 1 + len(v) + sovInternalTrace(uint64(len(v)))
			n += mapEntrySize + 2 + sovInternalTrace(uint64(mapEntrySize))
		}
	}
	return n
}

func sovInternalTrace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternalTrace(x uint64) (n int) {
	return sovInternalTrace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TraceCollect) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceCollect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceCollect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traces", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traces = append(m.Traces, make([]byte, postIndex-iNdEx))
			copy(m.Traces[len(m.Traces)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipInternalTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("hostname")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, &Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessStartTime", wireType)
			}
			m.ProcessStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessStartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiTimeSeconds", wireType)
			}
			m.ApiTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiTimeSeconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternalTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("service_type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("service")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trace_id")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("env")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeMillisecond", wireType)
			}
			m.StartTimeMillisecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeMillisecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeMillisecond", wireType)
			}
			m.EndTimeMillisecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimeMillisecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMicroseconds", wireType)
			}
			m.DurationMicroseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationMicroseconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanType", wireType)
			}
			m.SpanType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanType |= (SpanType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeMicrosecond", wireType)
			}
			m.StartTimeMicrosecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeMicrosecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamInt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParamInt == nil {
				m.ParamInt = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternalTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternalTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternalTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternalTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ParamInt[mapkey] = mapvalue
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamFloat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParamFloat == nil {
				m.ParamFloat = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternalTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternalTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternalTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternalTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ParamFloat[mapkey] = mapvalue
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamString", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParamString == nil {
				m.ParamString = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternalTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternalTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInternalTrace
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternalTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternalTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ParamString[mapkey] = mapvalue
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallServiceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallResource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallResource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorInfoList = append(m.ErrorInfoList, &ErrorInfo{})
			if err := m.ErrorInfoList[len(m.ErrorInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternalTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("span_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("parent_span_id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("operation_name")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("start_time_millisecond")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("end_time_millisecond")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("duration_microseconds")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("status")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("span_type")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("start_time_microsecond")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternalTrace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorKind", wireType)
			}
			m.ErrorKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorKind |= (ErrorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorStack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorStack = append(m.ErrorStack, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorOccurTime", wireType)
			}
			m.ErrorOccurTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorOccurTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 256:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternalTrace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorTags == nil {
				m.ErrorTags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternalTrace
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInternalTrace
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternalTrace
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInternalTrace
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInternalTrace(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInternalTrace
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ErrorTags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternalTrace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternalTrace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternalTrace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternalTrace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternalTrace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternalTrace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternalTrace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternalTrace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternalTrace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternalTrace   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("internal_trace.proto", fileDescriptor_internal_trace_04883c2397d91b0d)
}

var fileDescriptor_internal_trace_04883c2397d91b0d = []byte{
	// 1028 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0x1b, 0x37,
	0x13, 0xd6, 0x4a, 0xd6, 0xd7, 0x48, 0x96, 0x65, 0xc2, 0xf6, 0x4b, 0xf8, 0x6d, 0x65, 0x41, 0x45,
	0x53, 0xd5, 0x05, 0x84, 0xc2, 0x87, 0xa2, 0x09, 0x9c, 0x7e, 0xd8, 0xb5, 0x6b, 0xb5, 0x75, 0x1a,
	0x48, 0xee, 0x79, 0xc1, 0xec, 0xd2, 0x0e, 0xe1, 0x5d, 0x92, 0x59, 0x52, 0x46, 0x7c, 0xeb, 0x4f,
	0xe8, 0xad, 0xff, 0xa6, 0xe7, 0x1c, 0x73, 0x4b, 0x4f, 0x45, 0x61, 0xff, 0x91, 0x82, 0xe4, 0xae,
	0x4c, 0x59, 0x35, 0x10, 0xf4, 0xb6, 0x33, 0xcf, 0x33, 0xcf, 0x0c, 0x67, 0xc8, 0x91, 0x60, 0x83,
	0x71, 0x4d, 0x33, 0x4e, 0x92, 0x50, 0x67, 0x24, 0xa2, 0x23, 0x99, 0x09, 0x2d, 0x50, 0xdb, 0x1a,
	0x61, 0x2a, 0x62, 0x9a, 0xa8, 0xc1, 0x09, 0xb4, 0xcf, 0x8c, 0x7d, 0x28, 0x92, 0x84, 0x46, 0x1a,
	0x6d, 0x41, 0xcd, 0xe2, 0x0a, 0x07, 0xfd, 0xca, 0xb0, 0x3d, 0xc9, 0x2d, 0xd4, 0x87, 0xc6, 0x4b,
	0xa1, 0x34, 0x27, 0x29, 0xc5, 0xe5, 0x7e, 0x79, 0xd8, 0x3c, 0x58, 0x79, 0xf3, 0xd7, 0x4e, 0x69,
	0x32, 0xf7, 0x0e, 0xfe, 0xa8, 0x40, 0xd5, 0x4a, 0xa1, 0x4f, 0xa0, 0xad, 0x68, 0x76, 0xc5, 0x22,
	0x1a, 0xea, 0x6b, 0x49, 0x71, 0xe0, 0xf1, 0x5b, 0x39, 0x72, 0x76, 0x2d, 0x29, 0xea, 0x41, 0x3d,
	0x37, 0x17, 0x34, 0x0b, 0x27, 0xda, 0x81, 0x86, 0x2b, 0x96, 0xc5, 0xb8, 0xe2, 0x13, 0xac, 0x77,
	0x1c, 0xa3, 0x2d, 0xa8, 0x50, 0x7e, 0x85, 0x57, 0x3c, 0xcc, 0x38, 0xd0, 0x10, 0xaa, 0x4a, 0x12,
	0xae, 0x70, 0xb5, 0x5f, 0x19, 0xb6, 0xf6, 0xd0, 0xc8, 0x3f, 0xf3, 0x68, 0x2a, 0x09, 0x9f, 0x38,
	0x82, 0xa9, 0x35, 0x12, 0x5c, 0x13, 0xc6, 0x69, 0x66, 0xd2, 0xd4, 0xfa, 0xc1, 0x5d, 0xad, 0x73,
	0xc4, 0xa5, 0x92, 0x2c, 0xc6, 0xf5, 0x7e, 0x30, 0xac, 0x14, 0xa9, 0x24, 0x8b, 0xd1, 0x1e, 0x20,
	0x99, 0x89, 0x88, 0x2a, 0x15, 0x2a, 0x4d, 0x32, 0x1d, 0x6a, 0x96, 0x52, 0xdc, 0xf0, 0x68, 0xdd,
	0x1c, 0x9f, 0x1a, 0xf8, 0x8c, 0xa5, 0x14, 0x7d, 0x0c, 0x2d, 0xc6, 0x95, 0x26, 0xdc, 0x1d, 0xad,
	0xe9, 0xe5, 0x84, 0x02, 0x18, 0xc7, 0xe8, 0xff, 0x50, 0x23, 0x52, 0x1a, 0xc6, 0x37, 0x1e, 0xa3,
	0x4a, 0xa4, 0x1c, 0xc7, 0x0b, 0x03, 0xf9, 0xd6, 0x83, 0xe7, 0x5e, 0x34, 0x82, 0x2e, 0x91, 0xcc,
	0xd6, 0x13, 0x2a, 0x1a, 0x09, 0x1e, 0x2b, 0x7c, 0xe0, 0xd5, 0xd5, 0x21, 0x92, 0x99, 0x72, 0xa6,
	0x0e, 0x1b, 0xbc, 0x6b, 0xc0, 0x8a, 0x69, 0x0d, 0xfa, 0x10, 0xea, 0xa6, 0x39, 0x26, 0xb1, 0x3f,
	0xba, 0x9a, 0x71, 0x8e, 0x63, 0xb4, 0x0b, 0x1d, 0x49, 0x32, 0xca, 0x75, 0x58, 0xb0, 0xfc, 0xe1,
	0xb5, 0x1d, 0x36, 0x75, 0xdc, 0xcf, 0xa0, 0x23, 0x24, 0xcd, 0x88, 0x66, 0x82, 0x87, 0xb6, 0x56,
	0x7f, 0x8e, 0xab, 0x73, 0xec, 0x99, 0x29, 0xf8, 0x09, 0x6c, 0xdd, 0xb5, 0x30, 0x4c, 0x59, 0x92,
	0x30, 0x57, 0xb7, 0x1d, 0x70, 0x51, 0xf6, 0x86, 0x2a, 0xfa, 0x78, 0x7a, 0xc7, 0x40, 0x5f, 0xc0,
	0x06, 0xe5, 0xf1, 0x72, 0x64, 0xd5, 0x8b, 0x44, 0x94, 0xc7, 0xf7, 0xe3, 0x1e, 0xc3, 0x66, 0x3c,
	0xcb, 0xeb, 0x4b, 0x59, 0x94, 0x89, 0xa2, 0x53, 0x35, 0x3f, 0x65, 0x41, 0x39, 0xf5, 0x18, 0xe8,
	0x03, 0xa8, 0x29, 0x4d, 0xf4, 0x4c, 0xe1, 0xba, 0xc7, 0xcd, 0x7d, 0xe8, 0x31, 0x34, 0x6d, 0x7b,
	0xec, 0x0b, 0x68, 0xf4, 0xcb, 0xc3, 0xce, 0xde, 0xd6, 0xf2, 0x35, 0x34, 0xcf, 0xa0, 0x18, 0x9c,
	0xca, 0xed, 0xa5, 0x3e, 0xcc, 0x73, 0xe2, 0xe6, 0x03, 0x7d, 0x98, 0x33, 0xd0, 0x53, 0x68, 0x4a,
	0x92, 0x91, 0x34, 0x64, 0x5c, 0xe3, 0x0d, 0x7b, 0xfb, 0xfb, 0xcb, 0x69, 0x47, 0xcf, 0x0d, 0x67,
	0xcc, 0xf5, 0x11, 0xd7, 0xd9, 0xf5, 0xa4, 0x21, 0x73, 0x13, 0x1d, 0x42, 0xcb, 0x85, 0x9f, 0x27,
	0x82, 0x68, 0xbc, 0x69, 0x05, 0x06, 0x0f, 0x09, 0x1c, 0x1b, 0x92, 0x93, 0x00, 0x39, 0x77, 0xa0,
	0x63, 0x68, 0x3b, 0x11, 0xa5, 0x33, 0xc6, 0x2f, 0xf0, 0x96, 0x55, 0xf9, 0xe8, 0x21, 0x95, 0xa9,
	0x65, 0x39, 0x19, 0x97, 0xdd, 0x79, 0xcc, 0x15, 0xcf, 0xa8, 0x12, 0xb3, 0x2c, 0xa2, 0x78, 0xe8,
	0x5f, 0xf1, 0xc2, 0x8b, 0x3e, 0x87, 0xf5, 0x88, 0x24, 0x49, 0xb8, 0xb0, 0x6e, 0xf6, 0x3d, 0xea,
	0x9a, 0x81, 0xa7, 0xde, 0xca, 0x31, 0xef, 0xdd, 0x8b, 0xc0, 0x4f, 0x17, 0xde, 0xfb, 0x1d, 0x19,
	0x7d, 0x0a, 0xab, 0x96, 0x38, 0xaf, 0xe0, 0x2b, 0x8f, 0x69, 0x35, 0x26, 0x45, 0x15, 0x5f, 0xc3,
	0x1a, 0xcd, 0x32, 0x91, 0x85, 0x8c, 0x9f, 0x8b, 0x30, 0x61, 0x4a, 0xe3, 0x63, 0x7b, 0xe4, 0xff,
	0x2d, 0x1e, 0xf9, 0xc8, 0x90, 0xc6, 0xfc, 0x5c, 0x4c, 0x56, 0x69, 0xf1, 0xf9, 0x13, 0x53, 0x7a,
	0xfb, 0x7b, 0x58, 0x5d, 0x18, 0x88, 0x59, 0x36, 0x97, 0xf4, 0x1a, 0x07, 0x5e, 0x4a, 0xe3, 0x40,
	0xdb, 0x50, 0xbd, 0x22, 0xc9, 0xcc, 0xac, 0xcb, 0xbb, 0x77, 0xec, 0x5c, 0x4f, 0xca, 0x5f, 0x06,
	0xdb, 0x63, 0x58, 0xbb, 0x37, 0x98, 0xf7, 0x93, 0x0a, 0x96, 0xa5, 0x7e, 0x80, 0xee, 0xfd, 0xe9,
	0xbc, 0x9f, 0x56, 0x73, 0x49, 0x6b, 0xf0, 0xae, 0x0c, 0xcd, 0xf9, 0xe1, 0xd1, 0x3e, 0x80, 0x6b,
	0xd7, 0x25, 0xe3, 0xb1, 0x15, 0xeb, 0xfc, 0x6b, 0xa7, 0xbc, 0xb7, 0xd1, 0xb4, 0x01, 0x3f, 0x32,
	0x1e, 0x9b, 0xb9, 0xb8, 0xe8, 0x94, 0x2a, 0x45, 0x2e, 0x16, 0x73, 0xb6, 0x2d, 0x74, 0xea, 0x10,
	0xb4, 0x03, 0x2d, 0x47, 0x55, 0x9a, 0x44, 0x97, 0xb8, 0xd2, 0xaf, 0x0c, 0x9b, 0x13, 0x97, 0x7b,
	0x6a, 0x3c, 0x66, 0x43, 0x3a, 0x82, 0x88, 0xa2, 0x59, 0xe6, 0x36, 0xf7, 0x8a, 0xbf, 0x21, 0x2d,
	0xfa, 0xb3, 0x01, 0xed, 0xde, 0x3e, 0x2e, 0x2a, 0xd7, 0xe4, 0x42, 0xe1, 0x5f, 0xcb, 0x76, 0xc8,
	0x8f, 0x1e, 0x18, 0x72, 0x7e, 0x08, 0x72, 0xa1, 0xdc, 0xd5, 0x76, 0x67, 0x30, 0xf6, 0xf6, 0x09,
	0x74, 0x16, 0xc1, 0xff, 0xda, 0xd9, 0xdd, 0x11, 0x34, 0x8a, 0x35, 0x82, 0x00, 0x6a, 0x87, 0x22,
	0x4d, 0x05, 0xef, 0x96, 0xcc, 0xb7, 0xb9, 0xc8, 0x34, 0xeb, 0x06, 0xd6, 0x9f, 0x30, 0xca, 0x75,
	0xb7, 0xbc, 0xfb, 0x7b, 0x90, 0x4f, 0xc2, 0x46, 0xb4, 0xa0, 0xfe, 0xdd, 0x0b, 0x6b, 0x76, 0x4b,
	0x08, 0xc3, 0xc6, 0xd1, 0x6b, 0xf7, 0x7f, 0x21, 0x7f, 0x03, 0x0e, 0x09, 0xd0, 0x3a, 0xac, 0x9e,
	0x68, 0x2d, 0x0f, 0x45, 0x9c, 0xbb, 0xca, 0xa8, 0x03, 0xf0, 0x4c, 0x4c, 0x5f, 0x25, 0xce, 0xae,
	0x18, 0xa5, 0xd3, 0x57, 0xce, 0x58, 0x41, 0x9b, 0xb0, 0xfe, 0x0b, 0x8f, 0xc8, 0xec, 0xe2, 0xa5,
	0x3e, 0x7a, 0x1d, 0x51, 0x69, 0x36, 0x67, 0xb7, 0x6a, 0x64, 0x0e, 0x66, 0x8a, 0x71, 0xaa, 0x94,
	0x63, 0xd6, 0x50, 0x13, 0xaa, 0xcf, 0x09, 0x67, 0x51, 0xb7, 0xbe, 0xfb, 0x08, 0x1a, 0x45, 0x4f,
	0xd0, 0x1a, 0xb4, 0x5c, 0xf5, 0x45, 0x05, 0x4d, 0xa8, 0xe6, 0x99, 0x0f, 0xf6, 0xdf, 0xdc, 0xf4,
	0x82, 0xb7, 0x37, 0xbd, 0xe0, 0xef, 0x9b, 0x5e, 0xf0, 0xdb, 0x6d, 0xaf, 0xf4, 0xf6, 0xb6, 0x57,
	0xfa, 0xf3, 0xb6, 0x57, 0x82, 0x41, 0x24, 0xd2, 0xd1, 0x8b, 0x6b, 0x4d, 0x63, 0xf3, 0xfb, 0x69,
	0xbf, 0x88, 0x4c, 0x17, 0xa6, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x0b, 0x2f, 0x80,
	0x13, 0x09, 0x00, 0x00,
}
