// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings.proto

package settings_models

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

	encoding_binary "encoding/binary"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SampleStrategy int32

const (
	SampleStrategy_ALL          SampleStrategy = 0
	SampleStrategy_SAMPLE_RATIO SampleStrategy = 1
	SampleStrategy_RATE_LIMIT   SampleStrategy = 2
)

var SampleStrategy_name = map[int32]string{
	0: "ALL",
	1: "SAMPLE_RATIO",
	2: "RATE_LIMIT",
}
var SampleStrategy_value = map[string]int32{
	"ALL":          0,
	"SAMPLE_RATIO": 1,
	"RATE_LIMIT":   2,
}

func (x SampleStrategy) Enum() *SampleStrategy {
	p := new(SampleStrategy)
	*p = x
	return p
}
func (x SampleStrategy) String() string {
	return proto.EnumName(SampleStrategy_name, int32(x))
}
func (x *SampleStrategy) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SampleStrategy_value, data, "SampleStrategy")
	if err != nil {
		return err
	}
	*x = SampleStrategy(value)
	return nil
}
func (SampleStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_settings_3be746a73ee80433, []int{0}
}

type Settings struct {
	Db    *Db    `protobuf:"bytes,1,req,name=db" json:"db,omitempty"`
	Trace *Trace `protobuf:"bytes,2,req,name=trace" json:"trace,omitempty"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_3be746a73ee80433, []int{0}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(dst, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

func (m *Settings) GetDb() *Db {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *Settings) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type Db struct {
	SlowQueryMillseconds int32 `protobuf:"varint,1,req,name=slow_query_millseconds,json=slowQueryMillseconds" json:"slow_query_millseconds"`
}

func (m *Db) Reset()         { *m = Db{} }
func (m *Db) String() string { return proto.CompactTextString(m) }
func (*Db) ProtoMessage()    {}
func (*Db) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_3be746a73ee80433, []int{1}
}
func (m *Db) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Db) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Db.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Db) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Db.Merge(dst, src)
}
func (m *Db) XXX_Size() int {
	return m.Size()
}
func (m *Db) XXX_DiscardUnknown() {
	xxx_messageInfo_Db.DiscardUnknown(m)
}

var xxx_messageInfo_Db proto.InternalMessageInfo

func (m *Db) GetSlowQueryMillseconds() int32 {
	if m != nil {
		return m.SlowQueryMillseconds
	}
	return 0
}

type Trace struct {
	SampleConfig *TraceSample `protobuf:"bytes,1,req,name=sample_config,json=sampleConfig" json:"sample_config,omitempty"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_3be746a73ee80433, []int{2}
}
func (m *Trace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(dst, src)
}
func (m *Trace) XXX_Size() int {
	return m.Size()
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetSampleConfig() *TraceSample {
	if m != nil {
		return m.SampleConfig
	}
	return nil
}

type TraceSample struct {
	Strategy SampleStrategy `protobuf:"varint,1,req,name=strategy,enum=settings_models.SampleStrategy" json:"strategy"`
	Value    float64        `protobuf:"fixed64,2,opt,name=value" json:"value"`
}

func (m *TraceSample) Reset()         { *m = TraceSample{} }
func (m *TraceSample) String() string { return proto.CompactTextString(m) }
func (*TraceSample) ProtoMessage()    {}
func (*TraceSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_settings_3be746a73ee80433, []int{3}
}
func (m *TraceSample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TraceSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TraceSample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TraceSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceSample.Merge(dst, src)
}
func (m *TraceSample) XXX_Size() int {
	return m.Size()
}
func (m *TraceSample) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceSample.DiscardUnknown(m)
}

var xxx_messageInfo_TraceSample proto.InternalMessageInfo

func (m *TraceSample) GetStrategy() SampleStrategy {
	if m != nil {
		return m.Strategy
	}
	return SampleStrategy_ALL
}

func (m *TraceSample) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Settings)(nil), "settings_models.Settings")
	proto.RegisterType((*Db)(nil), "settings_models.Db")
	proto.RegisterType((*Trace)(nil), "settings_models.Trace")
	proto.RegisterType((*TraceSample)(nil), "settings_models.TraceSample")
	proto.RegisterEnum("settings_models.SampleStrategy", SampleStrategy_name, SampleStrategy_value)
}
func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Db == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("db")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.Db.Size()))
		n1, err := m.Db.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Trace == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("trace")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.Trace.Size()))
		n2, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Db) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Db) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.SlowQueryMillseconds))
	return i, nil
}

func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SampleConfig == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("sample_config")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSettings(dAtA, i, uint64(m.SampleConfig.Size()))
		n3, err := m.SampleConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TraceSample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceSample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintSettings(dAtA, i, uint64(m.Strategy))
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
	i += 8
	return i, nil
}

func encodeVarintSettings(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Db != nil {
		l = m.Db.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	return n
}

func (m *Db) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSettings(uint64(m.SlowQueryMillseconds))
	return n
}

func (m *Trace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SampleConfig != nil {
		l = m.SampleConfig.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	return n
}

func (m *TraceSample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSettings(uint64(m.Strategy))
	n += 9
	return n
}

func sovSettings(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSettings(x uint64) (n int) {
	return sovSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Db == nil {
				m.Db = &Db{}
			}
			if err := m.Db.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("db")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("trace")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Db) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Db: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Db: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowQueryMillseconds", wireType)
			}
			m.SlowQueryMillseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowQueryMillseconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("slow_query_millseconds")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SampleConfig == nil {
				m.SampleConfig = &TraceSample{}
			}
			if err := m.SampleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sample_config")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceSample) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceSample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceSample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			m.Strategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Strategy |= (SampleStrategy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("strategy")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSettings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSettings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSettings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettings   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("settings.proto", fileDescriptor_settings_3be746a73ee80433) }

var fileDescriptor_settings_3be746a73ee80433 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4e, 0xc2, 0x40,
	0x18, 0xc4, 0xbb, 0xd5, 0x46, 0xf2, 0x81, 0xb5, 0x59, 0x0d, 0x21, 0xc6, 0x14, 0x53, 0x2f, 0xc4,
	0x18, 0x0e, 0x1c, 0xf5, 0x62, 0x11, 0x0e, 0x98, 0x12, 0xb5, 0xed, 0xd5, 0x6c, 0x5a, 0xba, 0x12,
	0x92, 0x85, 0xc5, 0xee, 0xa2, 0xe1, 0x2d, 0x7c, 0x2c, 0x8e, 0x1c, 0x3d, 0x19, 0x03, 0x2f, 0x62,
	0xba, 0xad, 0x7f, 0xf1, 0xb8, 0x33, 0xbf, 0x99, 0x9d, 0x7c, 0x60, 0x0a, 0x2a, 0xe5, 0x68, 0x32,
	0x14, 0xcd, 0x69, 0xca, 0x25, 0xc7, 0x7b, 0x9f, 0x6f, 0x32, 0xe6, 0x09, 0x65, 0xc2, 0xb9, 0x87,
	0x52, 0x50, 0x48, 0xf8, 0x04, 0xf4, 0x24, 0xae, 0xa1, 0x63, 0xbd, 0x51, 0x6e, 0xed, 0x37, 0xff,
	0x90, 0xcd, 0x4e, 0xec, 0xeb, 0x49, 0x8c, 0xcf, 0xc0, 0x90, 0x69, 0x34, 0xa0, 0x35, 0x5d, 0x71,
	0xd5, 0x0d, 0x2e, 0xcc, 0x5c, 0x3f, 0x87, 0x9c, 0x4b, 0xd0, 0x3b, 0x31, 0x3e, 0x87, 0xaa, 0x60,
	0xfc, 0x99, 0x3c, 0xce, 0x68, 0x3a, 0x27, 0xe3, 0x11, 0x63, 0x82, 0x0e, 0xf8, 0x24, 0x11, 0xea,
	0x33, 0xa3, 0xbd, 0xbd, 0x78, 0xab, 0x6b, 0xfe, 0x41, 0xc6, 0xdc, 0x65, 0x48, 0xff, 0x9b, 0x70,
	0xae, 0xc1, 0x50, 0x8d, 0xd8, 0x85, 0x5d, 0x11, 0x8d, 0xa7, 0x8c, 0x92, 0x01, 0x9f, 0x3c, 0x8c,
	0x86, 0xc5, 0xd0, 0xa3, 0xff, 0x07, 0x04, 0x0a, 0xf5, 0x2b, 0x79, 0xe4, 0x4a, 0x25, 0x1c, 0x06,
	0xe5, 0x1f, 0x26, 0x76, 0xa1, 0x24, 0x64, 0x1a, 0x49, 0x3a, 0x9c, 0xab, 0x32, 0xb3, 0x55, 0xdf,
	0x28, 0xcb, 0xd1, 0xa0, 0xc0, 0x8a, 0xa5, 0x5f, 0x31, 0x7c, 0x08, 0xc6, 0x53, 0xc4, 0x66, 0xd9,
	0x35, 0x50, 0x03, 0x15, 0x76, 0x2e, 0x9d, 0x5e, 0x80, 0xf9, 0x3b, 0x8d, 0x77, 0x60, 0xcb, 0xf5,
	0x3c, 0x4b, 0xc3, 0x16, 0x54, 0x02, 0xb7, 0x7f, 0xeb, 0x75, 0x89, 0xef, 0x86, 0xbd, 0x1b, 0x0b,
	0x61, 0x13, 0xc0, 0x77, 0xc3, 0x2e, 0xf1, 0x7a, 0xfd, 0x5e, 0x68, 0xe9, 0xed, 0xda, 0x62, 0x65,
	0xa3, 0xe5, 0xca, 0x46, 0xef, 0x2b, 0x1b, 0xbd, 0xac, 0x6d, 0x6d, 0xb9, 0xb6, 0xb5, 0xd7, 0xb5,
	0xad, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x08, 0xd3, 0x45, 0xd3, 0x01, 0x00, 0x00,
}
