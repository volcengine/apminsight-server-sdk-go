# ByteDance golangci-lint default config
# Version: beta
# Download latest version: `golangci-lint bconfig`
# Doc: https://bytedance.feishu.cn/docs/doccndTUkRoSpGEgeBsyHYvF4Lg#
# Configuration doc: https://golangci-lint.run/usage/configuration/

run:
  skip-dirs-use-default: true # include `vendor` `third_party` `testdata` `examples` `Godeps` `builtin`
  skip-dirs:
    - conf
    - mock
    - test
    - tests
    - clients
    - pb_gen
    - rpc_gen
    - kitex_gen
    - thrift_gen
  skip-files:
    - idls.go
    - kite.go
    - ".*\\.generated\\.go$"
    - ".*\\.gen\\.go$"
    - ".*\\.mock\\.go$"
    - ".*\\.thrift\\.go$"

linters:
  disable-all: true # disable all linters, but left linters below
  enable:
    - bgolint       # ByteDance Go code style linter
    - bodyclose     # checks whether HTTP response body is closed successfully
    - errcheck      # checking for unchecked errors in go programs
    - staticcheck   # go vet on steroids, applying a ton of static analysis checks
    - unused        # checks Go code for unused constants, variables, functions and types
    - varcheck      # finds unused global variables and constants
    - structcheck   # finds unused struct fields
    - deadcode      # finds unused code
    - unparam       # finds unused function parameters
    - goconst       # finds repeated strings that could be replaced by a constant
    - govet         # examines Go source code and reports suspicious constructs
    - gofmt         # checks whether code was gofmt-ed
    - goimports     # does everything that gofmt does, additionally it checks unused imports
    - gosimple      # for Go source code that specializes in simplifying a code
    - ineffassign   # detects when assignments to existing variables are not used
    - typecheck     # parses and type-checks Go code
    - dogsled       # for Go source code that specializes in simplifying a code
    - exportloopref # checks for pointers to enclosing loop variables
    - misspell      # finds commonly misspelled English words in comments

    # Recommended but not enabled by default.
    # - depcheck          # ByteDance Go module dependencies checker (need intranet environment)
    # - gocognit          # computes and checks the cognitive complexity of functions
    # - gocyclo           # computes and checks the cyclomatic complexity of functions
    # - gocritic          # the most opinionated Go source code linter
    # - godot             # checks if comments end in a period
    # - errorlint         # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    # - maligned          # tool to detect Go structs that would take less memory if their fields were sorted
    # - prealloc          # finds slice declarations that could potentially be preallocated
    # - unconvert         # remove unnecessary type conversions

    # Enable these linters as you need.
    # - asciicheck        # checks that your code does not contain non-ASCII identifiers
    # - depguard          # checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    # - dupl              # code clone detection
    # - exhaustive        # checks exhaustiveness of enum switch statements
    # - exhaustivestruct  # checks if all struct's fields are initialized
    # - funlen            # tool for detection of long functions
    # - gci               # control golang package import order and make it always deterministic
    # - gochecknoglobals  # checks that no global variables exist
    # - gochecknoinits    # checks that no init functions are present in Go code
    # - godox             # tool for detection of FIXME, TODO and other comment keywords
    # - goerr113          # checks the errors handling expressions
    # - gofumpt           # checks whether code was gofumpt-ed
    # - goheader          # checks is file header matches to pattern
    # - gomnd             # an analyzer to detect magic numbers.
    # - goprintffuncname  # checks that printf-like functions are named with `f` at the end
    # - gosec             # inspects source code for security problems
    # - interfacer        # suggests narrower interface types
    # - lll               # reports long lines
    # - nakedret          # finds naked returns in functions greater than a specified function length
    # - nestif            # reports deeply nested if statements
    # - nlreturn          # checks for a new line before return and branch statements to increase code clarity
    # - noctx             # noctx finds sending http request without context.Context
    # - nolintlint        # reports ill-formed or insufficient nolint directives
    # - rowserrcheck      # checks whether Err of rows is checked successfully
    # - scopelint         # checks for unpinned variables in go programs
    # - sqlclosecheck     # checks that sql.Rows and sql.Stmt are closed
    # - testpackage       # linter that makes you use a separate _test package
    # - tparallel         # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    # - whitespace        # tool for detection of leading and trailing whitespace
    # - wrapcheck         # checks that errors returned from external packages are wrapped
    # - wsl               # forces you to use empty lines

    # Have replacement.
    # - gomodguard        # => depcheck
    # - stylecheck        # => bgolint
    # - golint            # => bgolint

linters-settings:  
  goimports: 
    local-prefixes: code.byted.org,git.byted.org

issues:
  exclude-use-default: true
  include:
    # - BEXC0001 # uncomment this line makes `bgolint` check package and exported (const|function|*) should have comment.
